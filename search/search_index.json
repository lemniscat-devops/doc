{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Why Lemniscat ?","text":""},{"location":"#breaking-down-barriers-my-journey-into-devops-cloud-and-platform-engineering","title":"Breaking Down Barriers: My Journey into DevOps, Cloud, and Platform Engineering","text":"<p>For several years now, I've had the privilege of assisting various clients across different sectors in their digital transformation strategies. With two decades of experience under my belt, I've held numerous positions ranging from support to development, including system and network administration.</p>"},{"location":"#wall-of-confusion-and-the-devops-movement","title":"Wall of Confusion and the DevOps Movement","text":"<p>Early on, I noticed the strange gap that separated the world of administrators from that of developers. As a system and network administrator, I often found developers to be brusque and less demanding. How many times have I grumbled because the installation or update manual was poorly written? How many times have I struggled to perform an operation on software because it wasn't documented in the operational manual (if there was one)?</p> <p>On the flip side, when I worked as a developer, I found system administrators to be excessively procedural. \"Did you submit request X by filling out form Y?\" And when administrators finally performed the installation or update of the software, they messed up the installation procedure. In short, I experienced the famous \"wall of confusion\" from both sides.</p> <p>When the DevOps movement emerged, I quickly became enthusiastic. \"Of course, it's obvious! Why didn't we think of this sooner?\" Of course, I encountered many people resistant to this change, advancing arguments of varying validity.</p> <p>Ultimately, I realized that this was my calling. I believed in the importance of advocating for DevOps, even if it meant convincing one person at a time.</p>"},{"location":"#the-cloud-as-an-opportunity-to-break-down-the-wall","title":"The Cloud as an opportunity to break down the wall","text":"<p>Then, with the advent of the Cloud in my work environment, my enthusiasm was reignited. \"This is fantastic! We finally have an opportunity to break down the wall.\" The cloud allowed us to provision technical infrastructures quickly, reducing constraints related to complexity and deployment time. This was beneficial for developers who could expect to deliver their work more rapidly. Additionally, the platform approach of these environments also greatly simplified tasks for our system and network administrators.</p> <p>Fast forward several years, and I've specialized in Cloud and DevOps adoption. While clients have relatively smoothly transitioned to the Cloud, implementing DevOps practices within companies has proven to be challenging. Although there are some beautiful success stories, in my opinion, they remain too rare.</p>"},{"location":"#the-platform-engineering-movement","title":"The Platform Engineering Movement","text":"<p>Through years of experience and extensive reading of influential authors on the subject like Jez Humble, Gene Kim, Matthew Skelton, Nicole Forsgren, I've come to understand that at the enterprise level, the approach must be comprehensive. Each software component comprising the company's IT system must be designed to be coherent as a whole.</p> <p>The mental load that a DevOps approach can bring tends to cause teams to focus unidirectionally on their application's sole objective for which they are responsible. It's as if each team is running a sprint in their own lane, forgetting about other teams. The confusion is no longer just between developers and administrators but now between project teams. So, what can we do?</p> <p>Taking a step back, I noticed that Cloud providers offer platforms that lighten our responsibility and mental load while still keeping us accountable. For example, when I create a function app on Azure, I don't have to worry about the underlying infrastructure: data centers that need maintenance, network infrastructures that need to be operated, software that needs to be kept up to date. Yet, I remain responsible for my function app. If the code I deploy doesn't work, if my function isn't monitored, it's still my responsibility.</p> <p>This platform allows me to be more efficient while remaining autonomous and responsible. This concept of a platform promoted by the \"Platform Engineering\" movement may be the way forward.</p>"},{"location":"#the-devops-oriented-product","title":"The DevOps-Oriented Product","text":"<p>It's been two years since I've been working with my colleagues to implement this concept. We're establishing a platform for project teams to enable them to be as autonomous and responsible as possible while limiting their mental load. The experience has been extremely promising. We're building DevOps-oriented products that we make available on our platform's marketplace.</p> <p>A DevOps-oriented product is one designed to address all aspects of the DevOps approach for the consumer of the product.</p> <p>Let's take the example of the Azure function app. If we're to design a DevOps-oriented product to allow our teams to be autonomous and responsible for this function app, we need to ask the following questions:</p> <ul> <li>How will my consumer produce the necessary code? With Git?</li> <li>How will my consumer build their code? With a GitHub CI pipeline?</li> <li>How will my consumer test their code? With SonarQube, Cucumber...?</li> <li>How will my consumer release their code? With Azure Artifact?</li> <li>How will my consumer deploy their code? With Azure DevOps?</li> <li>How will my consumer operate their code? With an Azure Function App?</li> <li>How will my consumer monitor their code? With Azure Monitor?</li> <li>How will my consumer manage bugs and code evolutions? With Jira?</li> </ul>"},{"location":"#the-lemniscat-framework","title":"The Lemniscat Framework","text":"<p>Implementing this type of product requires a lot of work. Integrating into a platform the multitude of technological solutions that compose a company's information system is no easy task.</p> <p>Products designed for delivery typically rely on the same delivery solutions as the product itself when instantiated, making our product hyper-aligned with the CI/CD chain. Given the complexity of the product, this makes the product highly specific to its context and difficult to extend to another context (another project or another company).</p> <p>How can we design a product more simply? How can we reduce the product's adherence to the technological solutions that compose it, and particularly to the tools of the CI/CD chain?</p> <p>I searched for weeks and months. I saw several solutions like Dagger.IO, but none convinced me. So, at the end of 2023, I decided to create my own framework.</p> <p>I am honored to present to you the newcomer: Lemniscat.</p>"},{"location":"#why-this-name","title":"Why this name?","text":"<p>The Lemniscate is a mathematical curve that evokes the symbol of infinity, representing an endless continuity or an infinite loop. In parallel, the \"Lemni's cat\" is a fictitious character with no specific connection to any particular work, whose name creates an intelligent play on words with the Lemniscate. This association between a fictional character and a mathematical shape gives rise to an intriguing concept named Lemniscat.</p> <p>The Lemniscate is a mathematical curve that takes the shape of an elongated loop, closely resembling the infinity symbol (\u221e). This curve has interesting properties and is often used to represent concepts of infinite continuity or endless cycles.</p> <p>\"Lemni's cat\" is a fictitious character imagined to illustrate the play on words between the Lemniscate and a fictional entity. This cat is not associated with any specific work but is simply used as an example to highlight the phonetic resemblance between \"Lemni's cat\" and \"Lemniscate\".</p> <p>The DevOps approach is a software development methodology that emphasizes collaboration between development and operations teams, as well as the automation of processes. The infinity symbol has become the emblem of DevOps, symbolizing the continuous cycle of planning, development, testing, deployment, and monitoring of software.</p> <p>The Lemniscate, with its shape reminiscent of the infinity symbol, along with the play on words with \"Lemni's cat,\" creatively illustrates the notion of continuity and infinite cycles, in perfect harmony with DevOps principles.</p> <p>By associating the Lemniscate, Lemni's cat, and the infinity symbol with the DevOps approach, we get an intriguing illustration of the convergence between mathematics, fiction, and software development practices. This intelligent play on words highlights the cyclical and continuous nature of the development process, underscoring the ingenuity of the connection between these different concepts.</p>"},{"location":"#what-is-the-goal-of-lemniscat","title":"What is the goal of Lemniscat?","text":"<p>The goal of Lemniscat is to provide a framework that allows the design of DevOps-oriented products that are as independent as possible from the technological solutions that compose them, particularly from the tools of the CI/CD chain.</p> <p>The Lemniscat framework is designed to provide a set of guidelines and best practices for designing DevOps-oriented products. By following these guidelines, product designers can create products that are more flexible and adaptable to different contexts, making them easier to extend and integrate into various environments.</p> <p>The Lemniscat framework is intended to help product designers create products that are more aligned with the principles of DevOps, promoting autonomy, responsibility, and accountability for the consumers of the products.</p> <p>The lemniscat framework is like a meta framework that can operate many other frameworks (terraform, ansible, powershell, python, ...) to create a DevOps-oriented product.</p>"},{"location":"manifest/","title":"How to write a Manifest ?","text":"<p>The manifest file is a YAML file that contains the definition of the product to deploy. It contains the following sections:</p> <ul> <li>variables: The variables needed to deploy the product.</li> <li>capabilities: The capabilities can be activated during the product deployment.</li> <li>requirements: The plugins needed to execute tasks describe in the manifest file.</li> </ul>"},{"location":"manifest/#variables","title":"Variables","text":"<p>The variables are the static parameters needed to deploy the product. They are defined in the manifest file, and can be used in the tasks to execute. For example, you can define a variable to define the name of the product, and use this variable in the tasks to create the product.</p> <p>The variables are defined in the <code>variables</code> section of the manifest file, and are defined as a dictionary with the following structure:</p> <pre><code>variables:\n  - name: location\n    value: West Europe\n  ...\n</code></pre> <p>You can define in your variables a value based on another variablse. For example, you can define a variable <code>location</code> based on the environment variable <code>location</code>. To do that, you can use the following syntax:</p> <pre><code>variables:\n  - name: location\n    value: ${{ environment_location }}\n  ...\n</code></pre> <p>You can also concatenate variables to define a new variable. For example, you can define a variable <code>resourceGroupId</code> based on the subscriptionId and the resource group name.</p> <pre><code>variables:\n  - name: resourceGroupId\n    value: '/subscriptions/${{ env_subscriptionId }}/resourceGroups/${{ rgName }}'\n  ...\n</code></pre>"},{"location":"manifest/#pre-and-post-phases","title":"Pre and Post phases","text":"<p>The pre and post phases are the steps that need to be executed before and after the capabilities. They are defined in the manifest file, and can be used to execute tasks before and after the capabilities.</p> <p>The pre and post phases are defined in the <code>pre</code> and <code>post</code> sections of the manifest file, and are defined as a dictionary with the following structure:</p> <pre><code>pre:\n  tasks:\n    - task: powershell\n      displayName: 'Transform user email to user trigram'\n      steps: \n        - run\n      parameters:\n        type: inline\n        script: |\n          $reg = \"${{ developerEmail }}\" | Select-String -Pattern \"${{ regex_developerEmail }}\"\n          $trigram = \"$($reg.Matches.Groups[1])$($reg.Matches.Groups[2])\"\n          Write-Host \"[lemniscat.pushvar] trigram=$trigram\"\n...\npost:\n  tasks:\n    - task: powershell\n      displayName: 'Generate backstage catalog-info'\n      steps: \n        - run\n      parameters:\n        type: inline\n        script: |\n          python -m pip install Jinja2\n          python ${{ templatePath }}/scripts/backstage/catalog-info-render.py \"$($result.path)/vars.json\" \"${{ backstagePath }}/catalog-info/catalog-info.j2\" \"${{ backstagePath }}/catalog-info/catalog-info.yaml\"\n      storeVariablesInFile:\n        format: json\n        withSecrets: true\n</code></pre>"},{"location":"manifest/#definition","title":"Definition","text":"<p>You can define as many tasks as you want for the pre and post phases. For example, you can define a task to transform the user email to the user trigram in the pre phase, and a task to generate the backstage catalog-info in the post phase. You can also define templates for your tasks in the pre and post phases. During the execution of the runtime, the tasks are executed in the same order as defined in the manifest file.</p>"},{"location":"manifest/#capabilities","title":"Capabilities","text":"<p>The capabilities are the DevOps steps that can be activated during the deployment of a product. It's designed to be sure that all the DevOps aspects are covered during the design of a product. For each capability, you can define the solutions that need to be executed to activate the capability. For example, for capability code you can define Github and Gitlab as solutions to activate the capability when the product is deployed.</p> <p>For each capability, you can define the other capability that need to be executed before. For example, you can define the <code>operate</code> capability to be executed before the <code>code</code> capability. To do that ou must define the <code>dependsOn</code> parameter in the capability definition. <code>dependsOn</code> is a list of capabilities that need to be executed before the current capability. This parameter is optional.</p> <p>The capabilities are defined in the <code>capabilities</code> section of the manifest file, and are defined as a dictionary with the following structure:</p> <pre><code>capabilities:\n  code:\n    dependsOn:\n    - operate\n    solutions:\n    - solution: github\n      ...\n    - solution: gitlab\n      ...\n  build:\n    solutions:\n    - solution: jenkins\n      ...\n    - solution: azuredevops\n      ...\n  test:\n    solutions:\n    - solution: sonarqube\n      ...\n    - solution: jenkins\n      ...\n  release:\n    solutions: \n    - solution: artifactory\n      ...\n    - solution: azure-container-registry\n      ...\n  deploy:\n    solutions:\n    - solution: azuredevops\n      ...\n    - solution: argocd\n      ...\n  operate:\n    solutions:\n    - solution: azure\n      ...\n    - solution: aws\n      ...\n  monitor:\n    solutions:\n    - solution: grafana\n      ...\n    - solution: datadog\n      ...\n  plan:\n    solutions:\n    - solution: Jira\n      ...\n    - solution: PagerDuty\n      ...\n</code></pre>"},{"location":"manifest/#definition_1","title":"Definition","text":"<p>Here, the list of capabilities that you can define in the manifest file:</p> <ul> <li><code>code</code>: The capability to manage the code. For example, you can define the solutions to create a git repository, add collaborators, clone the repository, ...</li> <li><code>build</code>: The capability to build. For example, you can define the solutions to build with Jenkins, Azure DevOps, ...</li> <li><code>test</code>: The capability to test. For example, you can define the solutions to test with SonarQube, Jenkins, ...</li> <li><code>release</code>: The capability to release. For example, you can define the solutions to release with Artifactory, Azure Container Registry, ...</li> <li><code>deploy</code>: The capability to deploy. For example, you can define the solutions to deploy with Azure DevOps, ArgoCD, ...</li> <li><code>operate</code>: The capability to operate. For example, you can define the solutions to operate with Azure, AWS, ...</li> <li><code>monitor</code>: The capability to monitor. For example, you can define the solutions to monitor with Grafana, Datadog, ...</li> <li><code>plan</code>: The capability to plan. For example, you can define the solutions to plan with Jira, PagerDuty, ...</li> </ul> <p>Of course, you don't have to define all the capabilities in the manifest file. You can define only the capabilities that you need to or can activate during the deployment of the product.</p> <p>You can't define the same capability twice in the manifest file. If you define the same capability twice, the runtime will raise an error. You can't define a capability that is not in the list above. If you define a capability that is not in the list above, the runtime will raise an error.</p>"},{"location":"manifest/#solutions","title":"Solutions","text":"<p>The solutions are the tools that can be used to execute the capabilities. For example, you can use Jenkins to execute the build capability, or you can use Ansible to execute the deployment capability. For each solution, you can define a workflow with the tasks that need to be executed to activate the capability. For example, for Azure (in operate capability), you can define the tasks that need to be executed to deploy infrastructure with Terraform.</p> <p>The solutions are defined in the capability section of the manifest file, and are defined as a dictionary with the following structure:</p> <pre><code>capabilities:\n  code :\n    solutions:\n    - solution: github\n      tasks:\n        - task: github\n          steps: \n            - run\n          parameters:\n            action: createRepository\n            name: ${{ product_name }}\n            description: ${{ product_description }}\n            visibility: ${{ domain_visibility }}\n            organization: ${{ domain_organization }}\n            token: ${{ github_token }}\n            ...\n    - solution: gitlab\n      tasks:\n        - task: gitlab\n          steps: \n            - run\n          parameters:\n            action: createRepository\n            name: ${{ product_name }}\n            description: ${{ product_description }}\n            visibility: ${{ domain_visibility }}\n            organization: ${{ domain_organization }}\n            token: ${{ gitlab_token }}\n            ...\n  ...\n</code></pre>"},{"location":"manifest/#definition_2","title":"Definition","text":"<p>You can define as many solutions as you want for a capability. For example, you can define Github and Gitlab as solutions for the code capability. You can't define the same solution twice for a capability. If you define the same solution twice for a capability, the runtime will raise an error.</p> <p>To define a solution, you need to define the following parameters:</p> <ul> <li><code>solution: &lt;solutionName&gt;</code>, with <code>&lt;solutionName&gt;</code> the name of the solution to use to activate the capability.</li> </ul> <p>For each solution, you can define the tasks that need to be executed to activate the capability. The tasks are defined in the <code>tasks</code> section of the solution, and are defined as a dictionary with the following structure:</p> <pre><code>solutions:\n- solution: github\n  tasks:\n    ...\n</code></pre>"},{"location":"manifest/#tasks","title":"Tasks","text":"<p>The tasks are the actions that need to be executed to activate the capability. For example, you can define a task to execute a script, or a task to execute a terraform command. For each task, you need to tag in witch step it needs to be executed, and the parameters that need to be used to execute the task. You can define many tags for a task, and the task will be executed in the same step as the tag. In the same step, the tasks are executed in the same order as defined in the manifest file.</p> <p>The tasks are defined in the solution section of the manifest file, and are defined as a dictionary with the following structure:</p> <pre><code>capabilities:\n  code :\n    solutions:\n    - solution: github\n      tasks:\n        - task: github\n          displayName: 'Create repository'\n          steps: \n            - run\n          parameters:\n            action: createRepository\n            name: ${{ product_name }}\n            description: ${{ product_description }}\n            visibility: ${{ domain_visibility }}\n            organization: ${{ domain_organization }}\n            token: ${{ github_token }}\n            ...\n        - task: github\n          displayName: 'Add collaborators'\n          steps: \n            - run\n          parameters:\n            action: addCollaborators\n            name: ${{ product_name }}\n            collaborators: ${{ product_collaborators }}\n            token: ${{ github_token }}\n        - task: github\n          displayName: 'clone repository'\n          steps: \n            - run\n          parameters:\n            action: clone\n            name: ${{ product_name }}\n            token: ${{ github_token }}\n        - task: copy\n          displayName: 'Copy sample code'\n          steps: \n            - pre\n          parameters:\n            source: ${{ product_source }}\n            destination: ${{ currentpath }}/${{ product_name }}\n        - task: git\n          displayName: 'Add files'\n          steps: \n            - pre\n          parameters:\n            action: add\n            path: ${{ currentpath }}/${{ product_name }}\n        - task: git\n          displayName: 'Commit files'\n          steps: \n            - pre\n          parameters:\n            action: commit\n            path: ${{ currentpath }}/${{ product_name }}\n            message: 'Initial commit'\n        - task: git\n          displayName: 'Push files'\n          steps: \n            - pre\n          parameters:\n            action: push\n            path: ${{ currentpath }}/${{ product_name }}\n            token: ${{ github_token }}\n      ...\n</code></pre> <p>In order to factorize tasks in your solution, you can define templates for your tasks. For example, you can define a template to create and initialze a repository. To do that, you can use the following syntax in your manifest file:</p> <pre><code>capabilities:\n  code :\n    - solutions: github\n      tasks:\n        - template: ${{ templates_path }}/createRepository.yaml\n          displayName: 'Create and initialize repository'\n</code></pre> <p>And in the <code>createRepository.yaml</code> file, you can define the following tasks:</p> <pre><code>tasks:\n  - task: github\n    displayName: 'Create repository'\n    steps: \n    - run\n    parameters:\n    action: createRepository\n    name: ${{ product_name }}\n    description: ${{ product_description }}\n    visibility: ${{ domain_visibility }}\n    organization: ${{ domain_organization }}\n    token: ${{ github_token }}\n    ...\n  - task: github\n    displayName: 'Add collaborators'\n    steps: \n    - run\n    parameters:\n    action: addCollaborators\n    name: ${{ product_name }}\n    collaborators: ${{ product_collaborators }}\n    token: ${{ github_token }}\n  - task: github\n    displayName: 'clone repository'\n    steps: \n    - run\n    parameters:\n    action: clone\n    name: ${{ product_name }}\n    token: ${{ github_token }}\n  - task: copy\n    displayName: 'Copy sample code'\n    steps: \n    - pre\n    parameters:\n    source: ${{ product_source }}\n    destination: ${{ currentpath }}/${{ product_name }}\n  - task: git\n    displayName: 'Add files'\n    steps: \n    - pre\n    parameters:\n    action: add\n    path: ${{ currentpath }}/${{ product_name }}\n  - task: git\n    displayName: 'Commit files'\n    steps: \n    - pre\n    parameters:\n    action: commit\n    path: ${{ currentpath }}/${{ product_name }}\n    message: 'Initial commit'\n  - task: git\n    displayName: 'Push files'\n    steps: \n    - pre\n    parameters:\n    action: push\n    path: ${{ currentpath }}/${{ product_name }}\n    token: ${{ github_token }}\n</code></pre>"},{"location":"manifest/#definition_3","title":"Definition","text":"<p>You can define as many tasks as you want for a solution. For example, you can define a task to create a repository, a task to add collaborators, a task to deploy the infrastructure, ... During the execution of the runtime, the tasks are executed in the same order as defined in the manifest file.</p> <p>To define a task, you need to define the following parameters:</p> <ul> <li><code>task: &lt;pluginName&gt;</code>, with <code>&lt;pluginName&gt;</code> the name of the plugin to execute. This parameter is mandatory.</li> <li><code>displayName: &lt;displayName&gt;</code>, with <code>&lt;displayName&gt;</code> the name of the task to display in the logs. This parameter is optional.</li> <li><code>steps: &lt;steps&gt;</code>, with <code>&lt;steps&gt;</code> the list of steps where the task needs to be executed. This parameter is mandatory.   For example, you can define <code>steps: ['pre', 'run']</code> to execute the task in the pre and run steps.</li> <li><code>parameters: &lt;parameters&gt;</code>, with <code>&lt;parameters&gt;</code> the parameters needed to execute the task. This parameter is mandatory.</li> <li><code>condition: &lt;condition&gt;</code>, with <code>&lt;condition&gt;</code> the condition to execute the task. This parameter is optional. The condition is a boolean expression that needs to be true to execute the task. The condition can be based on the variables defined in the manifest file. The condition engine used is based on <code>simple_eval</code> library. So you use a limited set of operators and functions described in the simple_eval documentation.   For example, you can define <code>condition: \"${{ skipGitRepositoryCreation }} == False\"</code> to execute the task only if the product name is not empty.</li> </ul> <p>You can also define a template for your tasks. For example, you can define a template to create and initialze a repository.</p> <p>To define a template, you need to define the following parameters:</p> <ul> <li><code>template: &lt;templatePath&gt;</code>, with <code>&lt;templatePath&gt;</code> the path to the template file to use. This parameter is mandatory.</li> <li><code>displayName: &lt;displayName&gt;</code>, with <code>&lt;displayName&gt;</code> the name of the task to display in the logs. This parameter is optional.</li> </ul>"},{"location":"manifest/#requirements","title":"Requirements","text":"<p>The requirements are the plugins needed to execute tasks describe in the manifest file. They are defined in the <code>requirements</code> section of the manifest file, and are defined as a dictionary with the following structure:</p> <pre><code>requirements:\n  - name: lemniscat.plugin.azurecli\n    version: 1.0.0\n  - name: lemniscat.plugin.github\n    version: 1.0.0\n    ...\n  ...\n</code></pre>"},{"location":"runtime/","title":"How does the runtime works ?","text":"<p>The runtime operates through a sequence of 9 distinct steps:</p> <ol> <li>Load the configuration: The runtime loads the configuration files.</li> <li>Load manifest variables: The runtime loads the variables defined in the manifest file.</li> <li>Load the extra variables: The runtime loads the extra variables.</li> <li>Interpret all the variables: The runtime interprets all the variables. If some variables can't be interpreted, the runtime keeps the variable as is and continue the execution.</li> <li>Define the steps and capabilities to execute: The runtime define the steps and capabilities to execute based on the parameters.</li> <li>Read the manifest file (and templates): The runtime reads the manifest file to get the definition of the product to instantiate.</li> <li>Download (if needed) the plugins: The runtime downloads the plugins needed to execute the tasks.</li> <li>Execute the workflow: The runtime executes the workflow to activate the capabilities.</li> <li>Save the output context: If it's defined, the runtime saves the context (all variables) in the output file.</li> </ol>"},{"location":"runtime/#1-load-the-configuration","title":"1. Load the configuration","text":"<p>The runtime loads the configuration files. The configuration files are the files that contain the variables needed to instantiate the product. The order of the files is important. The variables defined in the first file can be overridden by the variables defined in the second file, and so on.</p> <p>Note</p> <p>To load configuration files, you can use the <code>-c</code> or <code>--configFiles</code> parameter in the command line.</p> <p>For example, you can define a configuration file to define the variables described at project level like this :</p> <pre><code>{\n    \"projectName\": \"myProject\",\n    \"description\": \"This is my project\",\n    \"visibility\": \"private\",\n    \"organization\": \"myOrganization\",\n    \"collaborators\": [\"user1\", \"user2\"],\n    \"permissions\": [\"reader\"]\n}\n</code></pre> <p>And you can define a configuration file to define the variables described at environment level like this :</p> <pre><code>{\n    \"envName\": \"developement\",\n    \"location\": \"West Europe\",\n    \"subscriptionId\": \"12345678-1234-1234-1234-123456789012\",\n    \"rgName\": \"${{ projectName }}-${{ appName }}-${{ envName }}-rg\",\n    \"permissions\": [\"contributor\"]\n}\n</code></pre> <p>After loading previous files the runtime will have the following variables :</p> Variable Value projectName myProject description This is my project visibility private organization myOrganization collaborators [\"user1\", \"user2\"] permissions [\"contributor\"] envName developement location West Europe subscriptionId 12345678-1234-1234-1234-123456789012 rgName \\${{ projectName }}-\\${{ appName }}-${{ envName }}-rg"},{"location":"runtime/#the-runtime-can-accept-yaml-and-json-files","title":"The runtime can accept Yaml and Json files","text":"<p>The runtime can accept Yaml and Json files.</p> <p>For example, you can define a configuration file to define the variables described at project level with a yaml file and another configuration file to define the variables described at environment level with a json file.</p>"},{"location":"runtime/#the-runtime-interprets-the-object-variables","title":"The runtime interprets the object variables","text":"<p>The runtime interprets object variables.  For each attribute of the object, the runtime creates a new variable with the name of the object and the name of the attribute separated by an underscore. For example, if you define a variable like this :</p> <pre><code>{\n    \"complexValue\": {\n        \"productName\": \"${{ projectName }}-${{ appName }}-${{ envName }}-app\",\n        \"envName\": \"${{ envName }}\"\n    }\n}\n</code></pre> <p>The runtime will have the following variables :</p> Variable Value complexValue_productName \\${{ projectName }}-\\${{ appName }}-${{ envName }}-app complexValue_envName ${{ envName }} <p>If you need to keep object variable as is, you need to add the <code>~object</code> attribute.  For example, if you define a variable like this :</p> <pre><code>{\n    \"complexValue\": {\n        \"~object\": true,\n        \"productName\": \"${{ projectName }}-${{ appName }}-${{ envName }}-app\",\n        \"envName\": \"${{ envName }}\"\n    }\n}\n</code></pre> <p>The runtime will have the following variables :</p> Variable Value complexValue { \"productName\": \"\\${{ projectName }}-\\${{ appName }}-${{ envName }}-app\", \"envName\": \"\\${{ envName }}\" }"},{"location":"runtime/#2-load-manifest-variables","title":"2. Load manifest variables","text":"<p>After loading the configuration files, the runtime load the variables defined in the manifest file. The variables defined in the manifest file can override the variables defined in the configuration files.</p> <p>For example, you can define a variable to define the name of the product, like this :</p> <pre><code>variables:\n  - name: productName\n    value: ${{ projectName }}-${{ appName }}-${{ envName }}-app\n  ...\n</code></pre> <p>After loading the manifest file, the runtime will have the following variables :</p> Variable Value projectName myProject description This is my project visibility private organization myOrganization collaborators [\"user1\", \"user2\"] permissions [\"contributor\"] envName developement location West Europe subscriptionId 12345678-1234-1234-1234-123456789012 rgName \\${{ projectName }}-\\${{ appName }}-${{ envName }}-rg productName \\${{ projectName }}-\\${{ appName }}-${{ envName }}-app"},{"location":"runtime/#3-load-the-extra-variables","title":"3. Load the extra variables","text":"<p>After loading the configuration files, the runtime load the extra variables. The extra variables are the override variables to use. These variables are used to override the variables defined in the configuration files.</p> <p>Note</p> <p>To load extra variables, you can use the <code>-x</code> or <code>--extraVariables</code> parameter in the command line.</p> <p>For example, you can define an extra variable to define the name of the product, like this :</p> <pre><code>{\n    \"appName\": \"myApp\"\n}\n</code></pre> <p>After loading the extra variables, the runtime will have the following variables :</p> Variable Value projectName myProject description This is my project visibility private organization myOrganization collaborators [\"user1\", \"user2\"] permissions [\"contributor\"] envName developement location West Europe subscriptionId 12345678-1234-1234-1234-123456789012 rgName \\${{ projectName }}-\\${{ appName }}-${{ envName }}-rg productName \\${{ projectName }}-\\${{ appName }}-${{ envName }}-app appName myApp"},{"location":"runtime/#4-interpret-all-the-variables","title":"4. Interpret all the variables","text":"<p>After loading the extra variables, the runtime interprets all the variables. If some variables can't be interpreted, the runtime keep the variable as is and continue the execution.</p> <p>For example, the runtime will interpret the <code>rgName</code> variable to have the following value : <code>myProject-myApp-developement-rg</code>. After interpreting all the variables, the runtime will have the following variables :</p> Variable Value projectName myProject description This is my project visibility private organization myOrganization collaborators [\"user1\", \"user2\"] permissions [\"contributor\"] envName developement location West Europe subscriptionId 12345678-1234-1234-1234-123456789012 rgName myProject-myApp-developement-rg productName myProject-myApp-developement-app appName myApp <p>The interpreter can interpret <code>string</code> values, <code>int</code> values, <code>float</code> values, <code>boolean</code> values, <code>list</code> values and <code>dictionary</code> values. For example, if a variable contains a complex value like this :</p> Variable Value complexValue { \"productName\": \"\\${{ productName }}\", \"envName\": \"${{ envName }}\" } <p>The interpreter will interpret the <code>complexValue</code> variable to have the following value : <code>{ \"productName\": \"myProject-myApp-developement-app\", \"envName\": \"developement\" }</code>.</p>"},{"location":"runtime/#5-define-the-steps-and-capabilities-to-execute","title":"5. Define the steps and capabilities to execute","text":"<p>After interpreting all the variables, the runtime defines the steps and capabilities to execute based on the parameters.</p> <p>Note</p> <p>To define the steps and capabilities to execute, you can use the <code>-s</code> or <code>--steps</code> parameter in the command line.</p>"},{"location":"runtime/#6-read-the-manifest-file-and-templates","title":"6. Read the manifest file (and templates)","text":"<p>After defining the steps and capabilities to execute, the runtime read the manifest file to get the definition of the product to intantiate. The runtime loads the capabilities, the solutions, interprets templates and loads the tasks to execute.</p>"},{"location":"runtime/#7-donwload-if-needed-the-plugins","title":"7. Donwload (if needed) the plugins","text":"<p>After reading the manifest file, the runtime download the plugins needed to execute the tasks. Plugins need to be defined in the <code>requirements</code> section of the manifest file.</p>"},{"location":"runtime/#8-execute-the-workflow","title":"8. Execute the workflow","text":"<p>After downloading the plugins, the runtime executes the workflow in this order : 1. Run the <code>pre</code> phase. Execute systematically all the tasks in this phase regardless of the activated capabilities. 2. Run the capabilities. Execute the tasks of the activated capabilities. 3. Run the <code>post</code> phase. Execute systematically all the tasks in this phase regardless of the activated capabilities.</p> <p>Note</p> <p>Activation of the capabilities To activate a capability you must define a variable named <code>&lt;capability&gt;_enable</code> and set to <code>true</code>. For example, to activate the code capability, you must define the following variable : <code>code_enable: true</code>.</p> <p>Note</p> <p>Define the solution to use To define the solution to use to activate a capability, you must define a variable named <code>&lt;capability&gt;_solution</code> and set to the name of the solution to use. For example, to define Github as the solution to activate the code capability, you must define the following variable : <code>code_solution: Github</code>.</p> <p>For each capability enabled, the runtime executes the solution defined in variables.</p> <p>For each solution, the runtime executes the tasks defined.</p>"},{"location":"runtime/#workflow-execution","title":"Workflow execution","text":"<p>The tasks are always executed in a specific order. The order is defined by the steps defined for each task. If you execute the runtime with the <code>--steps [\"all:code\"]</code> parameter, the runtime will execute all the tasks (exept <code>pre-clean</code>, <code>run-clean</code>, <code>post-clean</code> steps) with this order :</p> <ol> <li>All tasks with the <code>pre</code> step</li> <li>All tasks with the <code>run</code> step</li> <li>All tasks with the <code>post</code> step</li> </ol> <p>If you execute the runtime with the <code>--steps [\"allclean:code\"]</code> parameter, the runtime will execute all the tasks (exept <code>run</code> steps) with this order :</p> <ol> <li>All tasks with the <code>pre-clean</code> step</li> <li>All tasks with the <code>run-clean</code> step</li> <li>All tasks with the <code>post-clean</code> step</li> </ol> <p>Note</p> <p>If your task is tagged with multiple steps and the runtime is launched to execute both these steps, the task will be executed once. For example, if you execute the runtime with the <code>--steps [\"all:code\"]</code> parameter and you have a task with the steps <code>pre</code> and <code>run</code> (for exemple with Terraform init), the runtime will execute all the tasks with the <code>pre</code> step and ignore <code>run</code> step.</p> <p>For each task, the runtime executes the plugin defined. If the plugin generates output, the runtime collect the output and store it in the context (the bag of variables).</p> <p>For example, if you define a task to create a repository with Github, the runtime will execute the Github plugin to create the repository. If the plugin generates the repository URL, the runtime will store the <code>repositoryURL</code> variables in the context. So the runtime will have the following variables :</p> Variable Value projectName myProject description This is my project visibility private organization myOrganization collaborators [\"user1\", \"user2\"] permissions [\"contributor\"] envName developement location West Europe subscriptionId 12345678-1234-1234-1234-123456789012 rgName myProject-myApp-developement-rg productName myProject-myApp-developement-app appName myApp repositoryURL https://github.com/lemniscat-devops/lemniscat.runtime.git <p>After executing the plugin, the runtime interprets all the variables. If some variables can't be interpreted, the runtime keep the variable as is and continue the execution.</p>"},{"location":"runtime/#9-save-the-output-context","title":"9. Save the output context","text":"<p>If it's defined, the runtime saves the context (all variables interpreted) in the output file.</p> <p>Note</p> <p>To save the context, you can use the <code>-o</code> or <code>--outputContext</code> parameter in the command line.</p>"},{"location":"setup/","title":"How to install the runtime ?","text":""},{"location":"setup/#requirements","title":"Requirements","text":"<p>The runtime requires Python 3.10 or later and the following packages: <code>setup-tools</code> in version 61.0.0 or later.</p>"},{"location":"setup/#check-the-python-version","title":"Check the Python version","text":"<p>Check if you have the correct version of Python installed. To do this, open a terminal and run the following command:</p> <p>on Windows: <pre><code>py --version\n</code></pre></p> <p>on Linux: <pre><code>python3 --version\n</code></pre></p>"},{"location":"setup/#check-the-setup-tools-package","title":"Check the setup-tools package","text":"<p>Check if you have the <code>setup-tools</code> package installed. To do this, open a terminal and run the following command:</p> <p>on Windows: <pre><code>py -m ensurepip --upgrade\npip show setuptools\n</code></pre></p> <p>on Linux: <pre><code>python3 -m ensurepip --upgrade\npip show setuptools\n</code></pre></p> <p>If the package is not installed, you can install it with the following command:</p> <pre><code>pip install setuptools\n</code></pre> <p>If the package is installed, but not up to date, you can update it with the following command:</p> <pre><code>pip install --upgrade setuptools\n</code></pre>"},{"location":"setup/#install-the-runtime","title":"Install the runtime","text":"<p>To install the runtime, you can use the following command:</p> <pre><code>pip install lemniscat-runtime\n</code></pre>"},{"location":"setup/#debug-with-vs-code","title":"Debug with VS Code","text":"<p>To debug your manifest with Visual Studio Code, you need to : </p> <ol> <li>At the root of your project create a folder <code>.vscode</code> </li> <li>Add a <code>launch.json</code> file and write this content :     <pre><code>{\n    // Use IntelliSense to learn about possible attributes.\n    // Hover to view descriptions of existing attributes.\n    // For more information, visit: https://go.microsoft.com/fwlink/?linkid=830387\n    \"version\": \"0.2.0\",\n    \"configurations\": [\n        {\n            \"name\": \"PowerShell: lem STG\",\n            \"type\": \"PowerShell\",\n            \"request\": \"launch\",\n            \"script\": \"${workspaceRoot}/.vscode/run.ps1\",\n            \"cwd\": \"${workspaceRoot}\",\n            \"args\": [\n                \"-manifest\",\n                \"&lt;path to manifest.yml&gt;\",\n                \"-steps\",\n                \"'[\\\"all:all\\\"]'\",\n                \"-configFiles\",\n                \"'[\\\"&lt;path to config1.json&gt;\\\", \\\"&lt;path to config2.json&gt;\\\", &lt;...&gt;]'\",\n                \"-verbose\",\n                \"DEBUG\",\n                \"-outputPath\",\n                \"&lt;path to output.json&gt;\",\n                \"-extraParams\",\n                \"'{ \\\"appName\\\": \\\"sampl4\\\", \\\"scopeType\\\": \\\"developer\\\", \\\"developerEmail\\\": \\\"p.morisseau@groupeonepoint.com\\\", \\\"teamName\\\": \\\"\\\", \\\"instanceCode\\\": \\\"1\\\", &lt;...&gt; }'\",\n            ]\n        }\n    ]\n}\n</code></pre></li> <li>In <code>launch.json</code> replace content <code>&lt;&gt;</code> with your specific paths or values.</li> <li>Add a <code>run.ps1</code> file and write this content :     <pre><code>param(\n    [string]$manifest,\n    [string]$steps,\n    [string]$configFiles,\n    [string]$verbose = \"DEBUG\",\n    [string]$outputPath = \"outputContext.json\",\n    $extraParams\n)\n\n$env:ARM_SUBSCRIPTION_ID= \"&lt;subscriptionid&gt;\"\n$env:ARM_TENANT_ID= \"&lt;tenantid&gt;\"\n$env:ARM_CLIENT_ID= \"&lt;clientid&gt;\"\n$env:ARM_CLIENT_SECRET= \"&lt;clientsecret&gt;\"\n\npython -m pip install lemniscat.runtime&gt;=0.5.2\n\nlem -m $manifest -s $steps -c $configFiles -v $verbose -o $outputPath -x $extraParams\n</code></pre></li> </ol>"},{"location":"setup/#setup-virtual-environment","title":"Setup virtual environment","text":"<p>I advise creating a virtual environment if you don't want to have conflicts between your python packages. For this I suggest you use Venv.</p> <p>Before creating your virtual environment, in the <code>.vscode</code> folder create the <code>requirements.txt</code> file and add the following content: <pre><code>setuptools&gt;=61.0\n</code></pre></p> <p>Then, in Vscode, do Ctrl+Shift+P then search for <code>Python: Create Environment...</code> At creation time, it will ask you to define the requirements file.</p> <p>Afterwards, you just have to do an F5 and off you go!</p>"},{"location":"usage/","title":"How to use the runtime ?","text":"<p>To use the runtime, you can use the following command:</p> <pre><code>lem -m &lt;manifest_file&gt; -c &lt;config_files&gt; -s &lt;steps&gt; -x &lt;extraVariables&gt; -o &lt;outputContextFile&gt; -v &lt;verbosity&gt;\n</code></pre>"},{"location":"usage/#parameters","title":"Parameters","text":"<p><code>-m</code> or <code>--manifest</code>: [Required] The manifest file to use. This file contains the definition of the product to instantiate.</p> <p><code>-c</code> or <code>--configFiles</code>: [Optional] The configuration files to use. These files contain the variables needed to instantiate the product. </p> <p><code>-s</code> or <code>--steps</code>: [Required] The steps to execute. These steps are defined in the manifest file.</p> <p><code>-x</code> or <code>--extraVariables</code>: [Optional] The override variables to use. These variables are used to override the variables defined in the configuration files.</p> <p><code>-o</code> or <code>--outputContext</code>: [Optional] The output file to use. This file contains all the variables computed during the execution.</p> <p><code>-v</code> or <code>--verbosity</code> : [Optional] The verbosity level to use. This level is used to control the verbosity of the logs.</p>"},{"location":"usage/#definition","title":"Definition","text":""},{"location":"usage/#manifest","title":"Manifest","text":"<p>The parameters <code>-m</code> or <code>--manifest</code> is the path to the manifest file to use. This file contains the definition of the product to instantiate.</p>"},{"location":"usage/#config-files","title":"Config files","text":"<p>The parameters <code>-c</code> or <code>--configFiles</code> is the path to the configuration files to use. These files contain the variables needed to instantiate the product. The order of the files is important. The variables defined in the first file can be overridden by the variables defined in the second file, and so on.</p>"},{"location":"usage/#steps","title":"Steps","text":"<p>The parameters <code>-s</code> or <code>--steps</code> is the steps and capabilities to execute. These steps are defined in the manifest file. You need to respect the naming convention to be sure that the runtime can execute the steps : <code>&lt;step&gt;:&lt;capability&gt;</code></p> <p>For example :</p> <ul> <li>to execute only the pre step of the code capability, you must define : <code>-s ['pre:code']</code></li> <li>to execute the pre and run steps of the code capability, you must define : <code>-s ['pre:code', 'run:code']</code></li> <li>to execute the pre and run steps of the code capability and the pre step of the build capability, you must define : <code>-s ['pre:code', 'run:code', 'pre:build']</code></li> </ul> <p>If you want to execute all the capabilities, you can define <code>all</code> as the capability to execute. For example :</p> <ul> <li>to execute all the pre steps for all capabilities, you must define : <code>-s ['pre:all']</code></li> <li>to execute all the pre and run steps for all capabilities, you must define : <code>-s ['pre:all', 'run:all']</code></li> </ul> <p>If you want to execute all the instantiation steps for a capability (<code>pre</code>, <code>run</code> and <code>post</code>), you can define <code>all</code> as the step to execute. For example :</p> <ul> <li>to execute all the steps for the code capability, you must define : <code>-s ['all:code']</code></li> <li>to execute all the steps for all capability, you must define : <code>-s ['all:all']</code></li> </ul> <p>If you want to execute all the cleanup steps for a capability (<code>pre-clean</code>, <code>run-clean</code> and <code>post-clean</code>), you can define <code>allclean</code> as the step to execute. For example :</p> <ul> <li>to execute all the cleanup steps for the code capability, you must define : <code>-s ['allclean:code']</code></li> <li>to execute all the cleanup steps for all capabilities, you must define : <code>-s ['allclean:all']</code></li> </ul>"},{"location":"what/","title":"What is this ?","text":"<p>Lemniscat is a Framework to provide a DevOps approach to the development of products.</p> <p>To be operational, the framework needs to be used with a runtime and plugins. They are based on the following principles:</p> <ul> <li>Product oriented: The framework is designed to be used in the development of products, not in the development of software. This means that the framework is designed to be used in the development of products that are composed of software, hardware, and other components.</li> <li>Modular: The framework is designed to be modular, so that it can be used in different contexts and with different tools.</li> <li>Extensible: The framework is designed to be extensible, so that it can be plugged with different tools and solutions that are not yet supported, and you judge necessary.</li> <li>Open source: The framework, runtime and plugins are open source, so that it can be used and modified by anyone.</li> <li>Community driven: The framework, runtime and plugins is designed to be community driven, so that it can be used and improved by a community of users and developers.</li> <li>DevOps oriented: The framework is designed to be used in a DevOps approach, so that it can be used to activate all the capabilities of DevOps (code, build, test, ...).</li> <li>CI/CD solution software agnostic: The runtime is designed to be used with any CI/CD solution, but not only if you prefer, you can use it with a simple script, a workflow runner, or any other solution.</li> <li>Cloud agnostic: The runtime is designed to be used with any cloud provider, so that it can be used with any cloud provider.</li> <li>locally executable: The runtime is designed to be executed locally, so that it can be used in a local environment to help the development of products (for example).</li> </ul>"},{"location":"what/#system-model","title":"System model","text":"<p>The framework is based on the following system model:</p> <p></p>"},{"location":"what/#capabilities","title":"Capabilities","text":"<p>The capabilities are the DevOps steps that can be activated during the deployment of a product. It's designed to be sure that all the DevOps aspects are covered during the design of a product.  For each capability, you can define the solutions that need to be executed to activate the capability. For example, for capability code, you can define Github and Gitlab as solutions to activate the capability when the product is deployed.</p>"},{"location":"what/#solutions","title":"Solutions","text":"<p>The solutions are the tools that can be used to execute the capabilities. For example, you can use Jenkins to execute the build capability, or you can use Ansible to execute the deployment capability. For each solution, you can define a workflow with the tasks that need to be executed to activate the capability. For example, for Azure (in operate capability), you can define the tasks that need to be executed to deploy infrastructure with Terraform.</p>"},{"location":"what/#tasks","title":"Tasks","text":"<p>The tasks are the actions that need to be executed to activate the capability. For example, you can define a task to execute a script, or a task to execute a terraform command. For each task, you need to tag in witch step it needs to be executed, and the parameters that need to be used to execute the task. You can define many tags for a task, and the task will be executed in the same step as the tag. In the same step, the tasks are executed in the same order as defined in the manifest file.</p>"},{"location":"what/#step-concept","title":"Step concept","text":"<p>The step is the concept that defines the big stages of the instantiation of the product. It's designed to be sure that all the tasks are executed in the right order during the instantiation of the product. There are 6 steps:</p> <ul> <li>pre: The step to prepare the instantiation of the product. For example, you can use this step to prepare the environment to deploy the product, prepare the configuration files, generate terraform plan, ...</li> <li>run: The step to execute the instantiation of the product. For example, you can use this step to deploy the infrastructure, define access rights, create git repository, ...</li> <li>post: The step to finalize the instantiation of the product. For example, you can use this step to execute the tests, generate the documentation, register the product in the CMDB, ...</li> <li>pre-clean: The step to prepare the cleanup of the instantiation of the product. For example, you can use this step to prepare the environment to delete the product, prepare the configuration files, generate terraform plan for destroy, ...</li> <li>run-clean: The step to clean the instantiation of the product. For example, you can use this step to delete the infrastructure, delete the git repository, ...</li> <li>post-clean: The step to finalize the cleanup of the instantiation of the product. For example, you can use this step to unregister the product in the CMDB, ...</li> </ul>"},{"location":"plugins/azurecli/","title":"lemniscat.plugin.azurecli","text":"<p>A plugin to operate Azure services through Azure cli into a lemniscat workflow</p>"},{"location":"plugins/azurecli/#description","title":"Description","text":"<p>This plugin allows you to operate Azure services through Azure cli into a lemniscat manifest.</p>"},{"location":"plugins/azurecli/#usage","title":"Usage","text":""},{"location":"plugins/azurecli/#pre-requisites","title":"Pre-requisites","text":"<p>In order to use this plugin, you need to have an Azure subscription and an Azure service principal. You can create a service principal using the Azure CLI, PowerShell, or the Azure portal. The service principal is used to authenticate the Azure CLI to your Azure subscription.</p> <p>After that you to be sure that you have the Azure CLI installed on your agent. You can install it using the following command:</p>"},{"location":"plugins/azurecli/#linux","title":"Linux","text":"<pre><code>curl -sL https://aka.ms/InstallAzureCLIDeb | sudo bash\n</code></pre>"},{"location":"plugins/azurecli/#windows","title":"Windows","text":"<pre><code>Invoke-WebRequest -Uri https://aka.ms/installazurecliwindows -OutFile .\\AzureCLI.msi; Start-Process msiexec.exe -Wait -ArgumentList '/I AzureCLI.msi /quiet'\n</code></pre> <p>You need also set environment variables to authenticate the Azure CLI to your Azure subscription. - <code>ARM_SUBSCRIPTION_ID</code> : The subscription ID that you want to use - <code>ARM_CLIENT_ID</code> : The client ID of the service principal - <code>ARM_CLIENT_SECRET</code> : The client secret of the service principal - <code>ARM_TENANT_ID</code> : The tenant ID of the service principal</p> <p>You need to add plugin into the required section of your manifest file. <pre><code>requirements:\n  - name: lemniscat.plugin.azurecli\n    version: 0.1.0.9\n</code></pre></p>"},{"location":"plugins/azurecli/#running-powershell-commands-with-azure-cli","title":"Running powershell commands with Azure CLI","text":"<pre><code>- task: azurecli\n  displayName: 'Azure CLI'\n  steps:\n    - run\n  parameters:\n    scripttype: pwsh\n    commandtype: inline\n    script: |\n      $version = az --version\n      Write-Host \"Azure CLI version: $version\"\n</code></pre>"},{"location":"plugins/azurecli/#running-powershell-script-with-azure-cli","title":"Running powershell script with Azure CLI","text":"<pre><code>- task: azurecli\n  displayName: 'Azure CLI'\n  steps:\n    - run\n  parameters:\n    scripttype: pwsh\n    commandtype: file\n    filePath: ${{ workingdirectory }}/scripts/ClearAzureContainer.ps1\n    fileParams:\n      storageAccountName: ${{ storageAccountName }}\n      containerName: ${{ containerName }}\n</code></pre>"},{"location":"plugins/azurecli/#running-powershell-commmands-and-pass-variables-through-json-file","title":"Running powershell commmands and pass variables through json file","text":"<p>[!NOTE]  This feature is particulary recommand when you need to manipulate complexe variable with your task. You can access to the variables in the json file by using the following command: <pre><code>$location = Get-Location\n$variables = Get-Content \"$($location.path)/vars.json\" | ConvertFrom-Json -Depth 100\n</code></pre></p> <pre><code>- task: azurecli\n  displayName: 'Azure CLI'\n  steps:\n    - run\n  parameters:\n    scripttype: pwsh\n    commandtype: inline\n    script: |\n      $location = Get-Location\n      $variables = Get-Content \"$($location.path)/vars.json\" | ConvertFrom-Json -Depth 100\n      $version = az --version\n      Write-Host \"Azure CLI version: $version\"\n    storeVariablesInFile:\n      format: json\n      withSecrets: false\n</code></pre>"},{"location":"plugins/azurecli/#inputs","title":"Inputs","text":""},{"location":"plugins/azurecli/#parameters","title":"Parameters","text":"<ul> <li><code>scripttype</code>: The type of the script to run. It can be only <code>pwsh</code> (for the moment)</li> <li><code>commandtype</code>: The type of the command to run. It can be <code>inline</code> or <code>file</code></li> <li><code>script</code>: The script to run. It can be a powershell command line. It is used only if <code>commandtype</code> is <code>inline</code></li> <li><code>filePath</code>: The path of the powershell script file (*.ps1) to run. It is used only if <code>commandtype</code> is <code>file</code></li> <li><code>fileParams</code>: The parameters to pass to the powershell script file. It is used only if <code>commandtype</code> is <code>file</code></li> <li><code>storeVariablesInFile</code>: Describe the way to store the variables in a file to used in the task.</li> </ul>"},{"location":"plugins/azurecli/#storevariablesinfile","title":"StoreVariablesInFile","text":"<ul> <li><code>format</code>: The format of the file to store the variables. It can be <code>json</code> or <code>yaml</code></li> <li><code>withSecrets</code>: A boolean value to indicate if the secrets should be stored in the file. It can be <code>true</code> or <code>false</code></li> </ul>"},{"location":"plugins/azurecli/#outputs","title":"Outputs","text":"<p>You can push variables to the lemniscat runtime in order to be used after by other tasks. To do that, you need to use <code>Write-Host</code> command in your powershell script to push variables to the lemniscat runtime. You must use the following format to push variables to the lemniscat runtime: <code>[lemniscat.pushvar] &lt;variableName&gt;=&lt;variableValue&gt;</code></p> <p>For example: <pre><code>Write-Host \"[lemniscat.pushvar] workspaceExist=$workspaceExist\"\n</code></pre></p> <p>You can specify the sensitivity of the variable by adding <code>secret</code> like this : <code>[lemniscat.pushvar.secret] &lt;variableName&gt;=&lt;variableValue&gt;</code></p> <p>For example: <pre><code>Write-Host \"[lemniscat.pushvar.secret] storageAccountKey=$storageAccountKey\"\n</code></pre></p>"},{"location":"plugins/filetransform/","title":"lemniscat.plugin.filetransform","text":"<p>A plugin to transform one or more files into a lemniscat workflow</p>"},{"location":"plugins/filetransform/#description","title":"Description","text":"<p>This plugin allows you to transform one or more files into a lemniscat workflow. This plugin replace all attributes in the file by the value of the variables in the lemniscat runtime.</p> <p>For example, if you have a file <code>config.json</code> with the following content: <pre><code>{\n  \"url\": \"\",\n  \"port\": \"\"\n}\n</code></pre> and you have the following variables in your lemniscat workflow: - url: \"http://localhost\" - port: \"8080\"</p> <p>the plugin will transform the file into: <pre><code>{\n  \"url\": \"http://localhost\",\n  \"port\": \"8080\"\n}\n</code></pre></p>"},{"location":"plugins/filetransform/#usage","title":"Usage","text":""},{"location":"plugins/filetransform/#pre-requisites","title":"Pre-requisites","text":"<p>In order to use this plugin, you need to add plugin into the required section of your manifest file.</p> <pre><code>requirements:\n  - name: lemniscat.plugin.filetransform\n    version: 0.2.0\n</code></pre>"},{"location":"plugins/filetransform/#transform-json-file-with-variables","title":"Transform json file with variables","text":"<pre><code>- task: filetransform\n  displayName: 'set json file'\n  steps:\n    - run\n  parameters:\n    folderPath: ${{ filepath }}\n    fileType: json\n    targetFiles: \"*.json\"\n</code></pre>"},{"location":"plugins/filetransform/#transform-yaml-file-with-variables","title":"Transform yaml file with variables","text":"<pre><code>- task: filetransform\n  displayName: 'set yaml file'\n  steps:\n    - run\n  parameters:\n    folderPath: ${{ filepath }}\n    fileType: yaml\n    targetFiles: \"*.yml\"\n</code></pre>"},{"location":"plugins/filetransform/#inputs","title":"Inputs","text":""},{"location":"plugins/filetransform/#parameters","title":"Parameters","text":"<ul> <li><code>folderPath</code>: The path of the folder where the files to transform are located</li> <li><code>fileType</code>: The type of the file to transform. It can be <code>json</code> or <code>yaml</code></li> <li><code>targetFiles</code>: The pattern of the files to transform. It can be a single file or a pattern like <code>*.json</code> or <code>*.yml</code></li> </ul>"},{"location":"plugins/filetransform/#outputs","title":"Outputs","text":"<p>No outputs</p>"},{"location":"plugins/gitlab/","title":"lemniscat.plugin.gitlab","text":"<p>A gitlab plugin for lemniscat</p>"},{"location":"plugins/gitlab/#usage","title":"Usage","text":""},{"location":"plugins/gitlab/#pre-requisites","title":"Pre-requisites","text":"<p>To use this plugin, you need to add plugin into the required section of your manifest file.</p> <pre><code>requirements:\n  - name: lemniscat.plugin.github\n    version: 0.2.0\n</code></pre>"},{"location":"plugins/gitlab/#create-a-new-project-in-gitlab","title":"Create a new project in gitlab","text":"<pre><code>- task: gitlab\n  displayName: 'Gitlab create project'\n  steps:\n    - pre\n  parameters:\n    action: createProject\n    gitlabUrl: https://gitlab.com\n    token: ${{ gitlab_token}}\n    projectname: The name of the project\n    groupName: Name of the parent group if the project needs to be created within a group (optional)\n</code></pre>"},{"location":"plugins/gitlab/#create-a-new-group-in-gitlab","title":"Create a new group in gitlab","text":"<pre><code>- task: gitlab\n  displayName: 'Gitlab create group'\n  steps:\n    - pre\n  parameters:\n    action: createGroup\n    gitlabUrl: https://gitlab.com\n    token: ${{ gitlab_token}}\n    groupName: Name of the group\n    parentgroupname: The path of the parent group if the new group is a subgroup (optional) ex: 'peskedlabs/lemniscat'\n</code></pre>"},{"location":"plugins/gitlab/#add-a-member-to-a-project-in-gitlab","title":"Add a member to a project in gitlab","text":"<pre><code>- task: gitlab\n  displayName: 'Adds a member to a project'\n  steps:\n    - pre\n  parameters:\n    action: addMembers\n    gitlabUrl: https://gitlab.com\n    token: ${{ gitlab_token}}\n    projectName: The name of the project for which to add the member\n    parentgroupname: The path of the group containing the project (optional) ex: 'peskedlabs/lemniscat'\n    memberswithaccesslevel: A list containing the information of members to be added with their access levels in the form [{'member': 'xxx@xxx.com', 'accesslevel': 20}, {'member': 'xxx@xxx.com', 'accesslevel': 30}]. With 20 for gitlab.REPORTER_ACCESS, 30 for gitlab.DEVELOPER_ACCESS, 40 for gitlab.MAINTAINER_ACCESS.\n</code></pre>"},{"location":"plugins/gitlab/#create-a-directory-tree-in-gitlab","title":"Create a directory tree in gitlab","text":"<pre><code>- task: gitlab\n  displayName: 'Recursively creates directories in a GitLab project by creating and deleting temporary files'\n  steps:\n    - pre\n  parameters:\n    action: createDirectories\n    gitlabUrl: https://gitlab.com\n    token: ${{ gitlab_token}}\n    projectName: The name of the project for which to add directories\n    parentgroupname: ex: The path of the group ex: 'peskedlabs/lemniscat'\n    directoryStructure: An array representing the directory tree to be created ex: ['terraform','terraform/params','terraform/terragrunt','terraform/modules']\n</code></pre>"},{"location":"plugins/gitlab/#inputs","title":"Inputs","text":""},{"location":"plugins/gitlab/#parameters","title":"Parameters","text":"<ul> <li><code>action</code> : The action to be performed. It can be <code>createProject</code>, <code>createGroup</code>, <code>addMembers</code> or <code>createDirectories</code>.</li> <li><code>gitLabUrl</code> : Gitlab url.</li> <li><code>token</code> : Gitlab token.</li> <li><code>projectName</code> : The name of the project.</li> <li><code>groupName</code> : The name of the group.</li> <li><code>parentgroupname</code> : The path of the parent group</li> <li><code>memberswithaccesslevel</code> : A list containing the information of members to be added with their access levels in the form [{'member': 'xxx@xxx.com', 'accesslevel': 20}, {'member': 'xxx@xxx.com', 'accesslevel': 30}]. With 20 for gitlab.REPORTER_ACCESS, 30 for gitlab.DEVELOPER_ACCESS, 40 for gitlab.MAINTAINER_ACCESS.</li> <li><code>directoryStructure</code> : An array representing the directory tree to be created ex: ['terraform','terraform/params','terraform/terragrunt','terraform/modules'].</li> </ul>"},{"location":"plugins/powershell/","title":"lemniscat.plugin.powershell","text":"<p>A powershell plugin for lemniscat</p>"},{"location":"plugins/powershell/#description","title":"Description","text":"<p>This plugin allows you to run powershell commands and scripts in your lemniscat pipeline.</p>"},{"location":"plugins/powershell/#usage","title":"Usage","text":""},{"location":"plugins/powershell/#pre-requisites","title":"Pre-requisites","text":"<p>In order to use this plugin, you need to add plugin into the required section of your manifest file.</p> <pre><code>requirements:\n  - name: lemniscat.plugin.powershell\n    version: 0.2.0\n</code></pre>"},{"location":"plugins/powershell/#running-powershell-commands","title":"Running powershell commands","text":"<pre><code>- task: powershell\n  displayName: 'Powershell'\n  steps:\n    - run\n  parameters:\n    type: inline\n    script: |\n      $name = \"Philippe\"\n      Write-Host \"Hello $name\"\n</code></pre>"},{"location":"plugins/powershell/#running-powershell-script","title":"Running powershell script","text":"<pre><code>- task: powershell\n  displayName: 'Powershell'\n  steps:\n    - run\n  parameters:\n    type: file\n    filePath: ${{ workingdirectory }}/scripts/Hello.ps1\n    fileParams:\n      name: ${{ username }}\n</code></pre>"},{"location":"plugins/powershell/#running-powershell-commmands-and-pass-variables-through-json-file","title":"Running powershell commmands and pass variables through json file","text":"<p>[!NOTE]  This feature is particulary recommand when you need to manipulate complexe variable with your task. You can access to the variables in the json file by using the following command:</p> <pre><code>$location = Get-Location\n$variables = Get-Content \"$($location.path)/vars.json\" | ConvertFrom-Json -Depth 100\n</code></pre> <pre><code>- task: powershell\n  displayName: 'Powershell'\n  steps:\n    - run\n  parameters:\n    type: inline\n    script: |\n      $location = Get-Location\n      $variables = Get-Content \"$($location.path)/vars.json\" | ConvertFrom-Json -Depth 100\n      $version = az --version\n      Write-Host \"Azure CLI version: $version\"\n    storeVariablesInFile:\n      format: json\n      withSecrets: false\n</code></pre>"},{"location":"plugins/powershell/#inputs","title":"Inputs","text":""},{"location":"plugins/powershell/#parameters","title":"Parameters","text":"<ul> <li><code>type</code>: The type of the command to run. It can be <code>inline</code> or <code>file</code></li> <li><code>script</code>: The script to run. It can be a powershell command line. It is used only if <code>type</code> is <code>inline</code></li> <li><code>filePath</code>: The path of the powershell script file (*.ps1) to run. It is used only if <code>type</code> is <code>file</code></li> <li><code>fileParams</code>: The parameters to pass to the powershell script file. It is used only if <code>type</code> is <code>file</code></li> <li><code>storeVariablesInFile</code>: Describe the way to store the variables in a file to used in the task.</li> </ul>"},{"location":"plugins/powershell/#storevariablesinfile","title":"StoreVariablesInFile","text":"<ul> <li><code>format</code>: The format of the file to store the variables. It can be <code>json</code> or <code>yaml</code></li> <li><code>withSecrets</code>: A boolean value to indicate if the secrets should be stored in the file. It can be <code>true</code> or <code>false</code></li> </ul>"},{"location":"plugins/powershell/#outputs","title":"Outputs","text":"<p>You can push variables to the lemniscat runtime in order to be used after by other tasks. To do that, you need to use <code>Write-Host</code> command in your powershell script to push variables to the lemniscat runtime. You must use the following format to push variables to the lemniscat runtime: <code>[lemniscat.pushvar] &lt;variableName&gt;=&lt;variableValue&gt;</code></p> <p>For example:</p> <pre><code>Write-Host \"[lemniscat.pushvar] workspaceExist=$workspaceExist\"\n</code></pre> <p>You can specify the sensitivity of the variable by adding <code>secret</code> like this : <code>[lemniscat.pushvar.secret] &lt;variableName&gt;=&lt;variableValue&gt;</code></p> <p>For example:</p> <pre><code>Write-Host \"[lemniscat.pushvar.secret] storageAccountKey=$storageAccountKey\"\n</code></pre> <p>By default all variable are considered as string. If you want to specify the type of the variable, you can add the type after the variable name like this: <code>[lemniscat.pushvar(&lt;variableType&gt;)] &lt;variableName&gt;=&lt;variableValue&gt;</code></p> <p><code>variableType</code> can be <code>string</code>, <code>int</code>, <code>bool</code>, <code>float</code>, <code>json</code> (for complexe object)</p> <p>For example:</p> <pre><code>Write-Host \"[lemniscat.pushvar(int)] numberOfFiles=$numberOfFiles\"\n</code></pre>"},{"location":"plugins/terraform/","title":"lemniscat.plugin.terraform","text":"<p>A terraform plugin for lemniscat</p>"},{"location":"plugins/terraform/#description","title":"Description","text":"<p>This plugin provides a terraform plugin for lemniscat. It allows you to run terraform commands from within lemniscat.</p> <p>[!NOTE]  This plugin allow only for the moment : - Azure (with storage account backend) - Aws (with s3 backend)</p>"},{"location":"plugins/terraform/#usage","title":"Usage","text":""},{"location":"plugins/terraform/#pre-requisites","title":"Pre-requisites","text":"<p>To use this plugin, you need to have terraform installed on your machine. You can install terraform from here. In order to use this plugin, you need to add plugin into the required section of your manifest file.</p> <pre><code>requirements:\n  - name: lemniscat.plugin.terraform\n    version: 0.4.0\n</code></pre>"},{"location":"plugins/terraform/#run-terraform-init-command-with-storage-account-access-key","title":"Run terraform init command with Storage Account Access Key","text":"<pre><code>- task: terraform\n  displayName: 'Terraform init'\n  steps:\n    - pre\n  parameters:\n    action: init\n    tfPath: ${{ tfPath }}\n    backend:\n      backend_type: azurerm\n      storage_account_name: ${{ storage_account_name }}\n      container_name: tfstate\n      arm_access_key: ${{ arm_access_key }}\n      key: terraform.tfstate\n</code></pre>"},{"location":"plugins/terraform/#run-terraform-init-command-with-aws-s3","title":"Run terraform init command with AWS s3","text":"<pre><code>- task: terraform\n  displayName: 'Terraform init'\n  steps:\n    - pre\n  parameters:\n    action: init\n    tfPath: ${{ tfPath }}\n    backend:\n      backend_type: awss3\n      bucket: ${{ bucket }}\n      region: ${{ aws_region }}\n      aws_access_key: ${{ aws_access_key }}\n      aws_secret_key: ${{ aws_secret_key }}\n      key: terraform.tfstate\n</code></pre>"},{"location":"plugins/terraform/#run-terraform-init-command-with-azure-service-principal","title":"Run terraform init command with Azure Service Principal","text":"<p>If you want to use Service Principal to get the storage account access key, you can use the following configuration. First you need to create a Service Principal and assign it to the storage account. You can use the following command to create a Service Principal.</p> <pre><code>az ad sp create-for-rbac --name &lt;ServicePrincipalName&gt; --role contributor --scopes /subscriptions/&lt;subscription_id&gt;/resourceGroups/&lt;resource_group_name&gt;/providers/Microsoft.Storage/storageAccounts/&lt;storage_account_name&gt;\n</code></pre> <p>Then store the output in environment variables.</p> <ul> <li><code>ARM_SUBSCRIPTION_ID</code> : The subscription ID that you want to use</li> <li><code>ARM_CLIENT_ID</code> : The client ID of the service principal</li> <li><code>ARM_CLIENT_SECRET</code> : The client secret of the service principal</li> <li><code>ARM_TENANT_ID</code> : The tenant ID of the service principal</li> </ul> <p>Then you can use the following configuration to run terraform init command. </p> <pre><code>- task: terraform\n  displayName: 'Terraform init'\n  steps:\n    - pre\n  parameters:\n    action: init\n    tfPath: ${{ tfPath }}\n    backend:\n      backend_type: azurerm\n      storage_account_name: ${{ storage_account_name }}\n      container_name: tfstate\n      key: terraform.tfstate\n</code></pre>"},{"location":"plugins/terraform/#run-terraform-init-command-with-aws","title":"Run terraform init command with Aws","text":"<p>If you want to use Aws, you can use the following configuration. First you need to create a User and create an access key. </p> <p>Then store the output in environment variables.</p> <ul> <li><code>AWS_ACCESS_KEY_ID</code> : AWS access key associated with an IAM account </li> <li><code>AWS_SECRET_ACCESS_KEY</code> : The secret key associated with the access key</li> <li><code>AWS_DEFAULT_REGION</code> : The AWS Region whose servers you want to send your requests to by default</li> </ul> <p>Then you can use the following configuration to run terraform init command. </p> <pre><code>- task: terraform\n  displayName: 'Terraform init'\n  steps:\n    - pre\n  parameters:\n    action: init\n    tfPath: ${{ tfPath }}\n    backend:\n      backend_type: awss3\n      bucket: ${{ bucket }}\n      region: ${{ region }}\n      key: terraform.tfstate\n</code></pre>"},{"location":"plugins/terraform/#run-terraform-plan-command","title":"Run terraform plan command","text":"<pre><code>- task: terraform\n  displayName: 'Terraform plan'\n  steps:\n    - pre\n  parameters:\n    action: plan\n    tfPath: ${{ tfPath }}\n    tfVarFile: ${{ tfVarsPath }}/vars.tfvars\n    tfplanFile: ${{ tfPath }}/terraform.tfplan\n</code></pre>"},{"location":"plugins/terraform/#run-terraform-apply-command","title":"Run terraform apply command","text":"<pre><code>- task: terraform\n  displayName: 'Terraform apply'\n  steps:\n    - run\n  parameters:\n    action: apply\n    tfPath: ${{ tfPath }}\n    tfplanFile: ${{ tfPath }}/terraform.tfplan\n</code></pre>"},{"location":"plugins/terraform/#run-terraform-destroy-command","title":"Run terraform destroy command","text":"<pre><code>- task: terraform\n  displayName: 'Terraform destroy'\n  steps:\n    - run\n  parameters:\n    action: destroy\n    tfPath: ${{ tfPath }}\n    tfVarFile: ${{ tfVarsPath }}/vars.tfvars\n</code></pre>"},{"location":"plugins/terraform/#inputs","title":"Inputs","text":""},{"location":"plugins/terraform/#parameters","title":"Parameters","text":"<ul> <li><code>action</code> : The action to be performed. It can be <code>init</code>, <code>plan</code>, <code>apply</code> or <code>destroy</code>.</li> <li><code>tfPath</code> : The path to the terraform main file.</li> <li><code>tfVarFile</code> : The path to the terraform variable file.</li> <li><code>tfplanFile</code> : The path to the terraform plan file.</li> <li><code>backend</code> : The backend configuration. It contains the following fields.</li> <li><code>prefixOutput</code> : The prefix to be added to the output of the terraform command. It is optional. For example, if you have a terraform output <code>resource_group_name</code> and you want to add a prefix <code>tf</code> to it, you can set <code>prefixOutput</code> to <code>tf</code>. Then the output will be <code>tf.resource_group_name</code>.</li> </ul>"},{"location":"plugins/terraform/#backend","title":"Backend","text":"<ul> <li><code>backend_type</code> : The type of the backend. It can be <code>azurerm</code> or <code>awss3</code> for the moment. Must be provided if <code>tf.backend_type</code> isn't in the lemniscat bag of variables.</li> <li><code>storage_account_name</code> : The name of the storage account. Only required if <code>backend_type</code> is <code>azurerm</code>. Must be provided if <code>tf.storage_account_name</code> isn't in the lemniscat bag of variables.</li> <li><code>container_name</code> : The name of the container. Only required if <code>backend_type</code> is <code>azurerm</code>. Must be provided if <code>tf.container_name</code> isn't in the lemniscat bag of variables.</li> <li><code>arm_access_key</code> : The access key of the storage account. Only required if <code>backend_type</code> is <code>azurerm</code>. Must be provided if <code>tf.arm_access_key</code> isn't in the lemniscat bag of variables or if environment variables <code>ARM_SUBSCRIPTION_ID</code>, <code>ARM_CLIENT_ID</code>, <code>ARM_CLIENT_SECRET</code> and <code>ARM_TENANT_ID</code> are not set.</li> <li><code>bucket</code> : The name of the bucket. Only required if <code>backend_type</code> is <code>awss3</code>. Must be provided if <code>tf.bucket</code> isn't in the lemniscat bag of variables.</li> <li><code>region</code> : The region of the bucket. Only required if <code>backend_type</code> is <code>awss3</code>. Must be provided if <code>tf.region</code> isn't in the lemniscat bag of variables.</li> <li><code>aws_access_key</code> : The access key of the user. Only required if <code>backend_type</code> is <code>awss3</code>. Must be provided if <code>tf.aws_access_key</code> isn't in the lemniscat bag of variables or if environment variable <code>AWS_ACCESS_KEY_ID</code> is not set.</li> <li><code>aws_secret_key</code> : The secret key of the user. Only required if <code>backend_type</code> is <code>awss3</code>. Must be provided if <code>tf.aws_secret_key</code> isn't in the lemniscat bag of variables or if environment variable <code>AWS_SECRET_ACCESS_KEY</code> is not set.</li> <li><code>key</code> : The name of the state file. Must be provided if <code>tf.key</code> isn't in the lemniscat bag of variables.</li> </ul>"},{"location":"plugins/terraform/#outputs","title":"Outputs","text":"<p>You can push variables to the lemniscat runtime in order to be used after by other tasks. All the outpus defined in the terraform output file will be pushed to the lemniscat runtime. The sensitive outputs will be send to the lemniscat runtime as secret.</p> <p>If you want to add a prefix to the output, you can use the <code>prefixOutput</code> parameter. For example, if you have a terraform output <code>resource_group_name</code> and you want to add a prefix <code>tf</code> to it, you can set <code>prefixOutput</code> to <code>tf</code>. Then the output will be <code>tf.resource_group_name</code>.</p>"}]}